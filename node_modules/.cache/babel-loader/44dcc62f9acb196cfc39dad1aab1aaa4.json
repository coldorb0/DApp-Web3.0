{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/react-dapp/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { useState } from 'react';\nimport { ethers } from 'ethers'; // acts like a backend for our Web3/DApp \n\nimport Greeter from './artifacts/contracts/Greeter.sol/Greeter.json';\nimport Token from './artifacts/contracts/Token.sol/Token.json'; // Update with the contract address logged out to the CLI when it was deployed \n// !!!!!!!! Change this ..... \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst greeterAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\";\n\nfunction App() {\n  _s();\n\n  // store greeting in local state of react. Has nothing to do with the smart contract at the moment\n  const [greeting, setGreetingValue] = useState(); // request access to the user's account. This works regardless of the wallet you're using. \n\n  async function requestAccount() {\n    await window.ethereum.request({\n      method: 'eth_requestAccounts'\n    });\n  } // call the smart contract, read the current greeting value\n\n\n  async function fetchGreeting() {\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const contract = new ethers.Contract(greeterAddress, Greeter.abi, provider);\n\n      try {\n        const data = await contract.greet();\n        console.log('data: ', data);\n      } catch (err) {\n        console.log(\"Error: \", err);\n      }\n    }\n  } // call the smart contract, send an update\n\n\n  async function setGreeting() {\n    if (!greeting) return;\n\n    if (typeof window.ethereum !== 'undefined') {\n      await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(greeterAddress, Greeter.abi, signer);\n      const transaction = await contract.setGreeting(greeting);\n      await transaction.wait();\n      fetchGreeting();\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchGreeting,\n        children: \"Fetch Greeting\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: setGreeting,\n        children: \"Set Greeting\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: e => setGreetingValue(e.target.value),\n        placeholder: \"Set greeting\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"ssJ+r0h47BdXS1rZN8gxuQdI/4c=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","ethers","Greeter","Token","greeterAddress","App","greeting","setGreetingValue","requestAccount","window","ethereum","request","method","fetchGreeting","provider","providers","Web3Provider","contract","Contract","abi","data","greet","console","log","err","setGreeting","signer","getSigner","transaction","wait","e","target","value"],"sources":["/home/ubuntu/react-dapp/src/App.js"],"sourcesContent":["import './App.css';\nimport { useState } from 'react';\nimport { ethers } from 'ethers'   // acts like a backend for our Web3/DApp \nimport Greeter from './artifacts/contracts/Greeter.sol/Greeter.json'\nimport Token from './artifacts/contracts/Token.sol/Token.json'\n\n// Update with the contract address logged out to the CLI when it was deployed \n// !!!!!!!! Change this ..... \nconst greeterAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\"\n\nfunction App() {\n  // store greeting in local state of react. Has nothing to do with the smart contract at the moment\n  const [greeting, setGreetingValue] = useState()\n\n  // request access to the user's account. This works regardless of the wallet you're using. \n  async function requestAccount() {\n    await window.ethereum.request({ method: 'eth_requestAccounts' });\n  }\n\n  // call the smart contract, read the current greeting value\n  async function fetchGreeting() {\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum)\n      const contract = new ethers.Contract(greeterAddress, Greeter.abi, provider)\n      try {\n        const data = await contract.greet()\n        console.log('data: ', data)\n      } catch (err) {\n        console.log(\"Error: \", err)\n      }\n    }    \n  }\n\n  // call the smart contract, send an update\n  async function setGreeting() {\n    if (!greeting) return\n    if (typeof window.ethereum !== 'undefined') {\n      await requestAccount()\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner()\n      const contract = new ethers.Contract(greeterAddress, Greeter.abi, signer)\n      const transaction = await contract.setGreeting(greeting)\n      await transaction.wait()\n      fetchGreeting()\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <button onClick={fetchGreeting}>Fetch Greeting</button>\n        <button onClick={setGreeting}>Set Greeting</button>\n        <input onChange={e => setGreetingValue(e.target.value)} placeholder=\"Set greeting\" />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;;AAAA,OAAO,WAAP;AACA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,MAAT,QAAuB,QAAvB,C,CAAkC;;AAClC,OAAOC,OAAP,MAAoB,gDAApB;AACA,OAAOC,KAAP,MAAkB,4CAAlB,C,CAEA;AACA;;;AACA,MAAMC,cAAc,GAAG,4CAAvB;;AAEA,SAASC,GAAT,GAAe;EAAA;;EACb;EACA,MAAM,CAACC,QAAD,EAAWC,gBAAX,IAA+BP,QAAQ,EAA7C,CAFa,CAIb;;EACA,eAAeQ,cAAf,GAAgC;IAC9B,MAAMC,MAAM,CAACC,QAAP,CAAgBC,OAAhB,CAAwB;MAAEC,MAAM,EAAE;IAAV,CAAxB,CAAN;EACD,CAPY,CASb;;;EACA,eAAeC,aAAf,GAA+B;IAC7B,IAAI,OAAOJ,MAAM,CAACC,QAAd,KAA2B,WAA/B,EAA4C;MAC1C,MAAMI,QAAQ,GAAG,IAAIb,MAAM,CAACc,SAAP,CAAiBC,YAArB,CAAkCP,MAAM,CAACC,QAAzC,CAAjB;MACA,MAAMO,QAAQ,GAAG,IAAIhB,MAAM,CAACiB,QAAX,CAAoBd,cAApB,EAAoCF,OAAO,CAACiB,GAA5C,EAAiDL,QAAjD,CAAjB;;MACA,IAAI;QACF,MAAMM,IAAI,GAAG,MAAMH,QAAQ,CAACI,KAAT,EAAnB;QACAC,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBH,IAAtB;MACD,CAHD,CAGE,OAAOI,GAAP,EAAY;QACZF,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBC,GAAvB;MACD;IACF;EACF,CArBY,CAuBb;;;EACA,eAAeC,WAAf,GAA6B;IAC3B,IAAI,CAACnB,QAAL,EAAe;;IACf,IAAI,OAAOG,MAAM,CAACC,QAAd,KAA2B,WAA/B,EAA4C;MAC1C,MAAMF,cAAc,EAApB;MACA,MAAMM,QAAQ,GAAG,IAAIb,MAAM,CAACc,SAAP,CAAiBC,YAArB,CAAkCP,MAAM,CAACC,QAAzC,CAAjB;MACA,MAAMgB,MAAM,GAAGZ,QAAQ,CAACa,SAAT,EAAf;MACA,MAAMV,QAAQ,GAAG,IAAIhB,MAAM,CAACiB,QAAX,CAAoBd,cAApB,EAAoCF,OAAO,CAACiB,GAA5C,EAAiDO,MAAjD,CAAjB;MACA,MAAME,WAAW,GAAG,MAAMX,QAAQ,CAACQ,WAAT,CAAqBnB,QAArB,CAA1B;MACA,MAAMsB,WAAW,CAACC,IAAZ,EAAN;MACAhB,aAAa;IACd;EACF;;EAED,oBACE;IAAK,SAAS,EAAC,KAAf;IAAA,uBACE;MAAQ,SAAS,EAAC,YAAlB;MAAA,wBACE;QAAQ,OAAO,EAAEA,aAAjB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAQ,OAAO,EAAEY,WAAjB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAFF,eAGE;QAAO,QAAQ,EAAEK,CAAC,IAAIvB,gBAAgB,CAACuB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAtC;QAAwD,WAAW,EAAC;MAApE;QAAA;QAAA;QAAA;MAAA,QAHF;IAAA;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AASD;;GA9CQ3B,G;;KAAAA,G;AAgDT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}