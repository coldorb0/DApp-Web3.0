{"ast":null,"code":"import _regeneratorRuntime from\"/home/ubuntu/react-dapp/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/home/ubuntu/react-dapp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/home/ubuntu/react-dapp/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import'./App.css';import{useState}from'react';import{ethers}from'ethers';// acts like a backend for our Web3/DApp \nimport Greeter from'./artifacts/contracts/Greeter.sol/Greeter.json';//import Token from './artifacts/contracts/Token.sol/Token.json'\nimport Token from'./artifacts/contracts/Token.sol/Token.json';// Update with the contract address logged out to the CLI when it was deployed \n// !!!!!!!! Change this ..... \nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var greeterAddress=\"0xF4A9d95F2A65523BBBa3b5986fC4D4B95605a797\";var tokenAddress=\"0x0890b47bcb04d5abe0D559Efe4D09c90b5312FD9\";//const tokenAddress = \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\"\nfunction App(){// store greeting in local state of react. Has nothing to do with the smart contract at the moment\nvar _useState=useState(),_useState2=_slicedToArray(_useState,2),greeting=_useState2[0],setGreetingValue=_useState2[1];var _useState3=useState(),_useState4=_slicedToArray(_useState3,2),userAccount=_useState4[0],setUserAccount=_useState4[1];var _useState5=useState(),_useState6=_slicedToArray(_useState5,2),amount=_useState6[0],setAmount=_useState6[1];// request access to the user's account. This works regardless of the wallet you're using. \nfunction requestAccount(){return _requestAccount.apply(this,arguments);}// call the smart contract, read the current greeting value\nfunction _requestAccount(){_requestAccount=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return window.ethereum.request({method:'eth_requestAccounts'});case 2:case\"end\":return _context.stop();}}},_callee);}));return _requestAccount.apply(this,arguments);}function fetchGreeting(){return _fetchGreeting.apply(this,arguments);}function _fetchGreeting(){_fetchGreeting=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(){var provider,contract,data;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(!(typeof window.ethereum!=='undefined')){_context2.next=13;break;}provider=new ethers.providers.Web3Provider(window.ethereum);contract=new ethers.Contract(greeterAddress,Greeter.abi,provider);_context2.prev=3;_context2.next=6;return contract.greet();case 6:data=_context2.sent;console.log('data: ',data);_context2.next=13;break;case 10:_context2.prev=10;_context2.t0=_context2[\"catch\"](3);console.log(\"Error: \",_context2.t0);case 13:case\"end\":return _context2.stop();}}},_callee2,null,[[3,10]]);}));return _fetchGreeting.apply(this,arguments);}function getBalance(){return _getBalance.apply(this,arguments);}// call the smart contract, send an update\nfunction _getBalance(){_getBalance=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(){var _yield$window$ethereu,_yield$window$ethereu2,account,provider,contract,balance;return _regeneratorRuntime().wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:if(!(typeof window.ethereum!=='undefined')){_context3.next=12;break;}_context3.next=3;return window.ethereum.request({method:'eth_requestAccounts'});case 3:_yield$window$ethereu=_context3.sent;_yield$window$ethereu2=_slicedToArray(_yield$window$ethereu,1);account=_yield$window$ethereu2[0];provider=new ethers.providers.Web3Provider(window.ethereum);contract=new ethers.Contract(tokenAddress,Token.abi,provider);_context3.next=10;return contract.balanceOf(account);case 10:balance=_context3.sent;console.log(\"Balance: \",balance.toString());case 12:case\"end\":return _context3.stop();}}},_callee3);}));return _getBalance.apply(this,arguments);}function setGreeting(){return _setGreeting.apply(this,arguments);}function _setGreeting(){_setGreeting=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(){var provider,signer,contract,transaction;return _regeneratorRuntime().wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:if(greeting){_context4.next=2;break;}return _context4.abrupt(\"return\");case 2:if(!(typeof window.ethereum!=='undefined')){_context4.next=14;break;}_context4.next=5;return requestAccount();case 5:provider=new ethers.providers.Web3Provider(window.ethereum);signer=provider.getSigner();contract=new ethers.Contract(greeterAddress,Greeter.abi,signer);_context4.next=10;return contract.setGreeting(greeting);case 10:transaction=_context4.sent;_context4.next=13;return transaction.wait();case 13:fetchGreeting();case 14:case\"end\":return _context4.stop();}}},_callee4);}));return _setGreeting.apply(this,arguments);}function sendCoins(){return _sendCoins.apply(this,arguments);}function _sendCoins(){_sendCoins=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5(){var provider,signer,contract,transation;return _regeneratorRuntime().wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:if(!(typeof window.ethereum!=='undefined')){_context5.next=12;break;}_context5.next=3;return requestAccount();case 3:provider=new ethers.providers.Web3Provider(window.ethereum);signer=provider.getSigner();contract=new ethers.Contract(tokenAddress,Token.abi,signer);_context5.next=8;return contract.transfer(userAccount,amount);case 8:transation=_context5.sent;_context5.next=11;return transation.wait();case 11:console.log(\"\".concat(amount,\" Coins successfully sent to \").concat(userAccount));case 12:case\"end\":return _context5.stop();}}},_callee5);}));return _sendCoins.apply(this,arguments);}return/*#__PURE__*/_jsx(\"div\",{className:\"App\",children:/*#__PURE__*/_jsxs(\"header\",{className:\"App-header\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:fetchGreeting,children:\"Fetch Greeting\"}),/*#__PURE__*/_jsx(\"button\",{onClick:setGreeting,children:\"Set Greeting\"}),/*#__PURE__*/_jsx(\"input\",{onChange:function onChange(e){return setGreetingValue(e.target.value);},placeholder:\"Set greeting\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"button\",{onClick:getBalance,children:\"Get Balance\"}),/*#__PURE__*/_jsx(\"button\",{onClick:sendCoins,children:\"Send Coins\"}),/*#__PURE__*/_jsx(\"input\",{onChange:function onChange(e){return setUserAccount(e.target.value);},placeholder:\"Account ID\"}),/*#__PURE__*/_jsx(\"input\",{onChange:function onChange(e){return setAmount(e.target.value);},placeholder:\"Amount\"})]})});}export default App;","map":{"version":3,"names":["useState","ethers","Greeter","Token","greeterAddress","tokenAddress","App","greeting","setGreetingValue","userAccount","setUserAccount","amount","setAmount","requestAccount","window","ethereum","request","method","fetchGreeting","provider","providers","Web3Provider","contract","Contract","abi","greet","data","console","log","getBalance","account","balanceOf","balance","toString","setGreeting","signer","getSigner","transaction","wait","sendCoins","transfer","transation","e","target","value"],"sources":["/home/ubuntu/react-dapp/src/App.js"],"sourcesContent":["import './App.css';\nimport { useState } from 'react';\nimport { ethers } from 'ethers'   // acts like a backend for our Web3/DApp \nimport Greeter from './artifacts/contracts/Greeter.sol/Greeter.json'\n//import Token from './artifacts/contracts/Token.sol/Token.json'\nimport Token from './artifacts/contracts/Token.sol/Token.json'\n\n\n\n// Update with the contract address logged out to the CLI when it was deployed \n// !!!!!!!! Change this ..... \nconst greeterAddress = \"0xF4A9d95F2A65523BBBa3b5986fC4D4B95605a797\"\nconst tokenAddress = \"0x0890b47bcb04d5abe0D559Efe4D09c90b5312FD9\"\n//const tokenAddress = \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\"\n\nfunction App() {\n  // store greeting in local state of react. Has nothing to do with the smart contract at the moment\n  const [greeting, setGreetingValue] = useState()\n  const [userAccount, setUserAccount] = useState()\n  const [amount, setAmount] = useState()\n  // request access to the user's account. This works regardless of the wallet you're using. \n  async function requestAccount() {\n    await window.ethereum.request({ method: 'eth_requestAccounts' });\n  }\n\n  // call the smart contract, read the current greeting value\n  async function fetchGreeting() {\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum)\n      const contract = new ethers.Contract(greeterAddress, Greeter.abi, provider)\n      try {\n        const data = await contract.greet()\n        console.log('data: ', data)\n      } catch (err) {\n        console.log(\"Error: \", err)\n      }\n    }    \n  }\n  async function getBalance() {\n    if (typeof window.ethereum !== 'undefined') {\n      const [account] = await window.ethereum.request({ method: 'eth_requestAccounts' })\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const contract = new ethers.Contract(tokenAddress, Token.abi, provider)\n      const balance = await contract.balanceOf(account);\n      console.log(\"Balance: \", balance.toString());\n    }\n  }\n\n  // call the smart contract, send an update\n  async function setGreeting() {\n    if (!greeting) return\n    if (typeof window.ethereum !== 'undefined') {\n      await requestAccount()\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner()\n      const contract = new ethers.Contract(greeterAddress, Greeter.abi, signer)\n      const transaction = await contract.setGreeting(greeting)\n      await transaction.wait()\n      fetchGreeting()\n    }\n  }\n  \n  async function sendCoins() {\n    if (typeof window.ethereum !== 'undefined') {\n      await requestAccount()\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(tokenAddress, Token.abi, signer);\n      const transation = await contract.transfer(userAccount, amount);\n      await transation.wait();\n      console.log(`${amount} Coins successfully sent to ${userAccount}`);\n    }\n  }\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <button onClick={fetchGreeting}>Fetch Greeting</button>\n        <button onClick={setGreeting}>Set Greeting</button>\n        <input onChange={e => setGreetingValue(e.target.value)} placeholder=\"Set greeting\" />\n        <br />\n        <button onClick={getBalance}>Get Balance</button>\n        <button onClick={sendCoins}>Send Coins</button>\n        <input onChange={e => setUserAccount(e.target.value)} placeholder=\"Account ID\" />\n        <input onChange={e => setAmount(e.target.value)} placeholder=\"Amount\"/>   \n   </header>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}