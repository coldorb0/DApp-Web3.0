{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/react-dapp/src/App.js\",\n    _s2 = $RefreshSig$();\n\nimport './App.css';\nimport { useState } from 'react';\nimport { ethers } from 'ethers'; // acts like a backend for our Web3/DApp \n\nimport Greeter from './artifacts/contracts/Greeter.sol/Greeter.json';\nimport Token from './artifacts/contracts/Token.sol/Token.json'; // Update with the contract address logged out to the CLI when it was deployed \n// !!!!!!!! Change this ..... \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst greeterAddress = \"0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0\";\nconst tokenAddress = \"0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9\";\n\nfunction App() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  // store greeting in local state of react. Has nothing to do with the smart contract at the moment\n  const [greeting, setGreetingValue] = useState(); // request access to the user's account. This works regardless of the wallet you're using. \n\n  async function requestAccount() {\n    _s();\n\n    await window.ethereum.request({\n      method: 'eth_requestAccounts'\n    });\n    const [userAccount, setUserAccount] = useState();\n    const [amount, setAmount] = useState();\n\n    async function getBalance() {\n      if (typeof window.ethereum !== 'undefined') {\n        const [account] = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const contract = new ethers.Contract(tokenAddress, Token.abi, provider);\n        const balance = await contract.balanceOf(account);\n        console.log(\"Balance: \", balance.toString());\n      }\n    }\n  }\n\n  _s(requestAccount, \"WsP6R8Z3azCxJ/Uyd4j+sxkI8BE=\");\n\n  async function sendCoins() {\n    if (typeof window.ethereum !== 'undefined') {\n      await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(tokenAddress, Token.abi, signer);\n      const transation = await contract.transfer(userAccount, amount);\n      await transation.wait();\n      console.log(`${amount} Coins successfully sent to ${userAccount}`);\n    }\n  } // call the smart contract, read the current greeting value\n\n\n  async function fetchGreeting() {\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const contract = new ethers.Contract(greeterAddress, Greeter.abi, provider);\n\n      try {\n        const data = await contract.greet();\n        console.log('data: ', data);\n      } catch (err) {\n        console.log(\"Error: \", err);\n      }\n    }\n  } // call the smart contract, send an update\n\n\n  async function setGreeting() {\n    if (!greeting) return;\n\n    if (typeof window.ethereum !== 'undefined') {\n      await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(greeterAddress, Greeter.abi, signer);\n      const transaction = await contract.setGreeting(greeting);\n      await transaction.wait();\n      fetchGreeting();\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchGreeting,\n        children: \"Fetch Greeting\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: setGreeting,\n        children: \"Set Greeting\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: e => setGreetingValue(e.target.value),\n        placeholder: \"Set greeting\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: getBalance,\n        children: \"Get Balance\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendCoins,\n        children: \"Send Coins\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: e => setUserAccount(e.target.value),\n        placeholder: \"Account ID\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: e => setAmount(e.target.value),\n        placeholder: \"Amount\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(App, \"ssJ+r0h47BdXS1rZN8gxuQdI/4c=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","ethers","Greeter","Token","greeterAddress","tokenAddress","App","greeting","setGreetingValue","requestAccount","window","ethereum","request","method","userAccount","setUserAccount","amount","setAmount","getBalance","account","provider","providers","Web3Provider","contract","Contract","abi","balance","balanceOf","console","log","toString","sendCoins","signer","getSigner","transation","transfer","wait","fetchGreeting","data","greet","err","setGreeting","transaction","e","target","value"],"sources":["/home/ubuntu/react-dapp/src/App.js"],"sourcesContent":["import './App.css';\nimport { useState } from 'react';\nimport { ethers } from 'ethers'   // acts like a backend for our Web3/DApp \nimport Greeter from './artifacts/contracts/Greeter.sol/Greeter.json'\nimport Token from './artifacts/contracts/Token.sol/Token.json'\n\n// Update with the contract address logged out to the CLI when it was deployed \n// !!!!!!!! Change this ..... \nconst greeterAddress = \"0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0\" \nconst tokenAddress = \"0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9\"\n\nfunction App() {\n  // store greeting in local state of react. Has nothing to do with the smart contract at the moment\n  const [greeting, setGreetingValue] = useState()\n  \n  // request access to the user's account. This works regardless of the wallet you're using. \n  async function requestAccount() {\n    await window.ethereum.request({ method: 'eth_requestAccounts' });\nconst [userAccount, setUserAccount] = useState()\nconst [amount, setAmount] = useState()\n\nasync function getBalance() {\n    if (typeof window.ethereum !== 'undefined') {\n      const [account] = await window.ethereum.request({ method: 'eth_requestAccounts' })\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const contract = new ethers.Contract(tokenAddress, Token.abi, provider)\n      const balance = await contract.balanceOf(account);\n      console.log(\"Balance: \", balance.toString());\n    }\n  }  \n}\nasync function sendCoins() {\n    if (typeof window.ethereum !== 'undefined') {\n      await requestAccount()\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(tokenAddress, Token.abi, signer);\n      const transation = await contract.transfer(userAccount, amount);\n      await transation.wait();\n      console.log(`${amount} Coins successfully sent to ${userAccount}`);\n    }\n  }\n  // call the smart contract, read the current greeting value\n  async function fetchGreeting() {\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum)\n      const contract = new ethers.Contract(greeterAddress, Greeter.abi, provider)\n      try {\n        const data = await contract.greet()\n        console.log('data: ', data)\n      } catch (err) {\n        console.log(\"Error: \", err)\n      }\n    }    \n  }\n\n  // call the smart contract, send an update\n  async function setGreeting() {\n    if (!greeting) return\n    if (typeof window.ethereum !== 'undefined') {\n      await requestAccount()\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner()\n      const contract = new ethers.Contract(greeterAddress, Greeter.abi, signer)\n      const transaction = await contract.setGreeting(greeting)\n      await transaction.wait()\n      fetchGreeting()\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <button onClick={fetchGreeting}>Fetch Greeting</button>\n        <button onClick={setGreeting}>Set Greeting</button>\n        <input onChange={e => setGreetingValue(e.target.value)} placeholder=\"Set greeting\" />\n  <br />\n  <button onClick={getBalance}>Get Balance</button>\n  <button onClick={sendCoins}>Send Coins</button>\n  <input onChange={e => setUserAccount(e.target.value)} placeholder=\"Account ID\" />\n  <input onChange={e => setAmount(e.target.value)} placeholder=\"Amount\" />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}